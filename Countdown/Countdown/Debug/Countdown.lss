
Countdown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000ce8  00000d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800096  00800096  00000db2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002109  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000845  00000000  00000000  000030d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e90  00000000  00000000  0000391e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  000047b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000778  00000000  00000000  00004b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001031  00000000  00000000  00005278  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000062a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	6d c1       	rjmp	.+730    	; 0x2ec <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	ea c0       	rjmp	.+468    	; 0x1f2 <__vector_14>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ee       	ldi	r30, 0xE8	; 232
  3a:	fc e0       	ldi	r31, 0x0C	; 12
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 39       	cpi	r26, 0x96	; 150
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e9       	ldi	r26, 0x96	; 150
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	af 39       	cpi	r26, 0x9F	; 159
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	44 d4       	rcall	.+2184   	; 0x8e2 <main>
  5a:	44 c6       	rjmp	.+3208   	; 0xce4 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <_Z7TWIInitv>:
		LcdChar(str[i]);
	}
}
void LcdCursor(bool Cursor=0){
	if (Cursor==0)
	{LcdCommand(0xC);
  5e:	88 e4       	ldi	r24, 0x48	; 72
  60:	80 b9       	out	0x00, r24	; 0
  62:	84 e0       	ldi	r24, 0x04	; 4
  64:	86 bf       	out	0x36, r24	; 54
  66:	08 95       	ret

00000068 <_Z8TWIStartv>:
  68:	84 ea       	ldi	r24, 0xA4	; 164
  6a:	86 bf       	out	0x36, r24	; 54
  6c:	06 b6       	in	r0, 0x36	; 54
  6e:	07 fe       	sbrs	r0, 7
  70:	fd cf       	rjmp	.-6      	; 0x6c <_Z8TWIStartv+0x4>
  72:	08 95       	ret

00000074 <_Z7TWIStopv>:
  74:	84 e9       	ldi	r24, 0x94	; 148
  76:	86 bf       	out	0x36, r24	; 54
  78:	06 b6       	in	r0, 0x36	; 54
  7a:	04 fc       	sbrc	r0, 4
  7c:	fd cf       	rjmp	.-6      	; 0x78 <_Z7TWIStopv+0x4>
  7e:	08 95       	ret

00000080 <_Z13TWIWriteAddrshh>:
  80:	88 0f       	add	r24, r24
  82:	68 2b       	or	r22, r24
  84:	63 b9       	out	0x03, r22	; 3
  86:	84 e8       	ldi	r24, 0x84	; 132
  88:	86 bf       	out	0x36, r24	; 54
  8a:	06 b6       	in	r0, 0x36	; 54
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <_Z13TWIWriteAddrshh+0xa>
  90:	81 b1       	in	r24, 0x01	; 1
  92:	88 7f       	andi	r24, 0xF8	; 248
  94:	08 95       	ret

00000096 <_Z12TWIWriteDatah>:
  96:	83 b9       	out	0x03, r24	; 3
  98:	84 e8       	ldi	r24, 0x84	; 132
  9a:	86 bf       	out	0x36, r24	; 54
  9c:	06 b6       	in	r0, 0x36	; 54
  9e:	07 fe       	sbrs	r0, 7
  a0:	fd cf       	rjmp	.-6      	; 0x9c <_Z12TWIWriteDatah+0x6>
  a2:	81 b1       	in	r24, 0x01	; 1
  a4:	88 7f       	andi	r24, 0xF8	; 248
  a6:	08 95       	ret

000000a8 <_Z11Lcd4bitdatahb>:
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	d8 2f       	mov	r29, r24
  b0:	c6 2f       	mov	r28, r22
  b2:	da df       	rcall	.-76     	; 0x68 <_Z8TWIStartv>
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <deviceAdress>
  ba:	e2 df       	rcall	.-60     	; 0x80 <_Z13TWIWriteAddrshh>
  bc:	1c 2f       	mov	r17, r28
  be:	1d 2b       	or	r17, r29
  c0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Backlight>
  c4:	81 2b       	or	r24, r17
  c6:	e7 df       	rcall	.-50     	; 0x96 <_Z12TWIWriteDatah>
  c8:	d5 df       	rcall	.-86     	; 0x74 <_Z7TWIStopv>
  ca:	ce df       	rcall	.-100    	; 0x68 <_Z8TWIStartv>
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <deviceAdress>
  d2:	d6 df       	rcall	.-84     	; 0x80 <_Z13TWIWriteAddrshh>
  d4:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Backlight>
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	81 2b       	or	r24, r17
  dc:	dc df       	rcall	.-72     	; 0x96 <_Z12TWIWriteDatah>
  de:	ca df       	rcall	.-108    	; 0x74 <_Z7TWIStopv>
  e0:	8f e8       	ldi	r24, 0x8F	; 143
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <_Z11Lcd4bitdatahb+0x3c>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z11Lcd4bitdatahb+0x42>
  ea:	00 00       	nop
  ec:	bd df       	rcall	.-134    	; 0x68 <_Z8TWIStartv>
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <deviceAdress>
  f4:	c5 df       	rcall	.-118    	; 0x80 <_Z13TWIWriteAddrshh>
  f6:	db 7f       	andi	r29, 0xFB	; 251
  f8:	cd 2b       	or	r28, r29
  fa:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <Backlight>
  fe:	8c 2b       	or	r24, r28
 100:	ca df       	rcall	.-108    	; 0x96 <_Z12TWIWriteDatah>
 102:	b8 df       	rcall	.-144    	; 0x74 <_Z7TWIStopv>
 104:	8f e9       	ldi	r24, 0x9F	; 159
 106:	9f e0       	ldi	r25, 0x0F	; 15
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <_Z11Lcd4bitdatahb+0x60>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <_Z11Lcd4bitdatahb+0x66>
 10e:	00 00       	nop
 110:	df 91       	pop	r29
 112:	cf 91       	pop	r28
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <_Z10LcdCommandh>:
 118:	cf 93       	push	r28
 11a:	c8 2f       	mov	r28, r24
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	c3 df       	rcall	.-122    	; 0xa8 <_Z11Lcd4bitdatahb>
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	8c 2f       	mov	r24, r28
 126:	82 95       	swap	r24
 128:	80 7f       	andi	r24, 0xF0	; 240
 12a:	be df       	rcall	.-132    	; 0xa8 <_Z11Lcd4bitdatahb>
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <_Z7LcdInith>:
 130:	cf 93       	push	r28
 132:	c8 2f       	mov	r28, r24
 134:	94 df       	rcall	.-216    	; 0x5e <_Z7TWIInitv>
 136:	88 e0       	ldi	r24, 0x08	; 8
 138:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <Backlight>
 13c:	8f e3       	ldi	r24, 0x3F	; 63
 13e:	9c e9       	ldi	r25, 0x9C	; 156
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <_Z7LcdInith+0x10>
 144:	00 c0       	rjmp	.+0      	; 0x146 <_Z7LcdInith+0x16>
 146:	00 00       	nop
 148:	c0 93 9e 00 	sts	0x009E, r28	; 0x80009e <deviceAdress>
 14c:	82 e0       	ldi	r24, 0x02	; 2
 14e:	e4 df       	rcall	.-56     	; 0x118 <_Z10LcdCommandh>
 150:	88 e2       	ldi	r24, 0x28	; 40
 152:	e2 df       	rcall	.-60     	; 0x118 <_Z10LcdCommandh>
 154:	8c e0       	ldi	r24, 0x0C	; 12
 156:	e0 df       	rcall	.-64     	; 0x118 <_Z10LcdCommandh>
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	de df       	rcall	.-68     	; 0x118 <_Z10LcdCommandh>
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	dc df       	rcall	.-72     	; 0x118 <_Z10LcdCommandh>
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <_Z7LcdCharh>:
	Lcd4bitdata(command&0xF0,0);
	Lcd4bitdata((command<<4)&0xF0,0);
	
}

void LcdChar(uint8_t Lcdcharval){
 164:	cf 93       	push	r28
 166:	c8 2f       	mov	r28, r24
	Lcd4bitdata(Lcdcharval&0xF0,1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	9d df       	rcall	.-198    	; 0xa8 <_Z11Lcd4bitdatahb>
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
 16e:	61 e0       	ldi	r22, 0x01	; 1
 170:	8c 2f       	mov	r24, r28
 172:	82 95       	swap	r24
 174:	80 7f       	andi	r24, 0xF0	; 240
 176:	98 df       	rcall	.-208    	; 0xa8 <_Z11Lcd4bitdatahb>
	
}
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <_Z9LcdStringPc>:
	LcdString(str);
	
}

void LcdString (char *str)		/* Send string to LCD function */
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 182:	88 81       	ld	r24, Y
 184:	88 23       	and	r24, r24
 186:	29 f0       	breq	.+10     	; 0x192 <_Z9LcdStringPc+0x16>
 188:	21 96       	adiw	r28, 0x01	; 1
	{
		LcdChar(str[i]);
 18a:	ec df       	rcall	.-40     	; 0x164 <_Z7LcdCharh>
}

void LcdString (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 18c:	89 91       	ld	r24, Y+
 18e:	81 11       	cpse	r24, r1
 190:	fc cf       	rjmp	.-8      	; 0x18a <_Z9LcdStringPc+0xe>
	{
		LcdChar(str[i]);
	}
}
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <_Z12LcdSetCursorhhPc>:
	Lcd4bitdata(Lcdcharval&0xF0,1);
	Lcd4bitdata((Lcdcharval<<4)&0xF0,1);
	
}

void LcdSetCursor(uint8_t yaxis, uint8_t xaxis,char*str){
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ea 01       	movw	r28, r20
	uint8_t tempcommand;
	switch(yaxis){
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <_Z12LcdSetCursorhhPc+0x1a>
 1a2:	28 f0       	brcs	.+10     	; 0x1ae <_Z12LcdSetCursorhhPc+0x16>
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	39 f0       	breq	.+14     	; 0x1b6 <_Z12LcdSetCursorhhPc+0x1e>
 1a8:	83 30       	cpi	r24, 0x03	; 3
 1aa:	39 f0       	breq	.+14     	; 0x1ba <_Z12LcdSetCursorhhPc+0x22>
 1ac:	07 c0       	rjmp	.+14     	; 0x1bc <_Z12LcdSetCursorhhPc+0x24>
		case 0:tempcommand=0x80;break;  //yaxis =0
 1ae:	90 e8       	ldi	r25, 0x80	; 128
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <_Z12LcdSetCursorhhPc+0x24>
		case 1:tempcommand=0xC0;break;
 1b2:	90 ec       	ldi	r25, 0xC0	; 192
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <_Z12LcdSetCursorhhPc+0x24>
		case 2:tempcommand=0x94;break;
 1b6:	94 e9       	ldi	r25, 0x94	; 148
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <_Z12LcdSetCursorhhPc+0x24>
		case 3:tempcommand=0xd4;break;		
 1ba:	94 ed       	ldi	r25, 0xD4	; 212
	}
	LcdCommand(tempcommand|(0x0F&xaxis));
 1bc:	86 2f       	mov	r24, r22
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	89 2b       	or	r24, r25
 1c2:	aa df       	rcall	.-172    	; 0x118 <_Z10LcdCommandh>
	LcdString(str);
 1c4:	ce 01       	movw	r24, r28
 1c6:	da df       	rcall	.-76     	; 0x17c <_Z9LcdStringPc>
	
}
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	08 95       	ret

000001ce <_Z7InitADCv>:
uint16_t tdate;  /*EEPROM 3,4*/
uint16_t dateCount;
void InitADC()
{
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
 1ce:	3e 9a       	sbi	0x07, 6	; 7
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN)|(1<<ADIE);
 1d0:	86 b1       	in	r24, 0x06	; 6
 1d2:	8f 68       	ori	r24, 0x8F	; 143
 1d4:	86 b9       	out	0x06, r24	; 6
	sei();
 1d6:	78 94       	sei
 1d8:	08 95       	ret

000001da <_Z7ReadADCh>:
		
}

uint16_t ReadADC(uint8_t ADCchannel)
{	ADCSRA&=~(1<<ADIE);
 1da:	33 98       	cbi	0x06, 3	; 6
	
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 1dc:	97 b1       	in	r25, 0x07	; 7
 1de:	90 7f       	andi	r25, 0xF0	; 240
 1e0:	8f 70       	andi	r24, 0x0F	; 15
 1e2:	89 2b       	or	r24, r25
 1e4:	87 b9       	out	0x07, r24	; 7
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 1e6:	36 9a       	sbi	0x06, 6	; 6
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 1e8:	36 99       	sbic	0x06, 6	; 6
 1ea:	fe cf       	rjmp	.-4      	; 0x1e8 <_Z7ReadADCh+0xe>
	return ADC;
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	95 b1       	in	r25, 0x05	; 5
}
 1f0:	08 95       	ret

000001f2 <__vector_14>:

ISR(ADC_vect){
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	2f 93       	push	r18
 1fe:	3f 93       	push	r19
 200:	4f 93       	push	r20
 202:	5f 93       	push	r21
 204:	6f 93       	push	r22
 206:	7f 93       	push	r23
 208:	8f 93       	push	r24
 20a:	9f 93       	push	r25
 20c:	af 93       	push	r26
 20e:	bf 93       	push	r27
 210:	ef 93       	push	r30
 212:	ff 93       	push	r31
	
	if (ADC<700)
 214:	84 b1       	in	r24, 0x04	; 4
 216:	95 b1       	in	r25, 0x05	; 5
 218:	8c 3b       	cpi	r24, 0xBC	; 188
 21a:	92 40       	sbci	r25, 0x02	; 2
 21c:	d0 f4       	brcc	.+52     	; 0x252 <__vector_14+0x60>
	{ADCSRA&=~(1<<ADIE);
 21e:	33 98       	cbi	0x06, 3	; 6
		TIMSK&=~(1<<TOIE1);
 220:	89 b7       	in	r24, 0x39	; 57
 222:	8b 7f       	andi	r24, 0xFB	; 251
 224:	89 bf       	out	0x39, r24	; 57
		//USART_TxNumber(ADC);
		eeprom_write_byte((uint8_t*)0,tSecond); 
 226:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <tSecond>
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	3a d5       	rcall	.+2676   	; 0xca4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)1,tMinute);
 230:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <tMinute>
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	35 d5       	rcall	.+2666   	; 0xca4 <eeprom_write_byte>
		eeprom_write_byte((uint8_t*)2,tHour);
 23a:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <tHour>
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	30 d5       	rcall	.+2656   	; 0xca4 <eeprom_write_byte>
		eeprom_write_word((uint16_t*)3,tdate);
 244:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <tdate>
 248:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <tdate+0x1>
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	36 d5       	rcall	.+2668   	; 0xcbe <eeprom_write_word>
		//USART_TxStringln(" \r\nPowerDown");
		
	}
	ADCSRA |= (1<<ADSC);
 252:	36 9a       	sbi	0x06, 6	; 6
	
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <_Z17adcIntruptRefreshv>:
void adcIntruptRefresh(){
	ADMUX = (ADMUX & 0xF0) | (interruptChannel & 0x0F);
 276:	87 b1       	in	r24, 0x07	; 7
 278:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 27c:	9f 70       	andi	r25, 0x0F	; 15
 27e:	80 7f       	andi	r24, 0xF0	; 240
 280:	89 2b       	or	r24, r25
 282:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADIE);
 284:	33 9a       	sbi	0x06, 3	; 6
	ADCSRA |= (1<< ADSC);
 286:	36 9a       	sbi	0x06, 6	; 6
 288:	08 95       	ret

0000028a <_Z8lcdClockv>:
}



void lcdClock(){               //Update Time with Inturrept
	tSecond++;
 28a:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <tSecond>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
	if (tSecond>59)		//Second Control
 290:	8c 33       	cpi	r24, 0x3C	; 60
 292:	18 f4       	brcc	.+6      	; 0x29a <_Z8lcdClockv+0x10>
}



void lcdClock(){               //Update Time with Inturrept
	tSecond++;
 294:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <tSecond>
 298:	08 95       	ret
	if (tSecond>59)		//Second Control
	{tSecond=0;       
 29a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <tSecond>
	tMinute++;
 29e:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <tMinute>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
	if (tMinute>59)		//Minute Control
 2a4:	8c 33       	cpi	r24, 0x3C	; 60
 2a6:	18 f4       	brcc	.+6      	; 0x2ae <_Z8lcdClockv+0x24>

void lcdClock(){               //Update Time with Inturrept
	tSecond++;
	if (tSecond>59)		//Second Control
	{tSecond=0;       
	tMinute++;
 2a8:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <tMinute>
 2ac:	08 95       	ret
	if (tMinute>59)		//Minute Control
	{tMinute=0;     
 2ae:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <tMinute>
		tHour++;
 2b2:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <tHour>
 2b6:	8f 5f       	subi	r24, 0xFF	; 255
		if (tHour>23)	//Hour Control
 2b8:	88 31       	cpi	r24, 0x18	; 24
 2ba:	18 f4       	brcc	.+6      	; 0x2c2 <_Z8lcdClockv+0x38>
	if (tSecond>59)		//Second Control
	{tSecond=0;       
	tMinute++;
	if (tMinute>59)		//Minute Control
	{tMinute=0;     
		tHour++;
 2bc:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <tHour>
 2c0:	08 95       	ret
		if (tHour>23)	//Hour Control
		{tHour=0;
 2c2:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <tHour>
			tdate++;
 2c6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <tdate>
 2ca:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <tdate+0x1>
 2ce:	01 96       	adiw	r24, 0x01	; 1
			if (tdate>999) //Date Control
 2d0:	88 3e       	cpi	r24, 0xE8	; 232
 2d2:	23 e0       	ldi	r18, 0x03	; 3
 2d4:	92 07       	cpc	r25, r18
 2d6:	28 f4       	brcc	.+10     	; 0x2e2 <_Z8lcdClockv+0x58>
	if (tMinute>59)		//Minute Control
	{tMinute=0;     
		tHour++;
		if (tHour>23)	//Hour Control
		{tHour=0;
			tdate++;
 2d8:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <tdate+0x1>
 2dc:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <tdate>
 2e0:	08 95       	ret
			if (tdate>999) //Date Control
			{tdate=0;
 2e2:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <tdate+0x1>
 2e6:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <tdate>
 2ea:	08 95       	ret

000002ec <__vector_8>:
	ADCSRA|=(1<<ADIE);
	ADCSRA |= (1<< ADSC);
}

ISR(TIMER1_OVF_vect)
{	TCNT1=34285;
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	3f 93       	push	r19
 2fa:	4f 93       	push	r20
 2fc:	5f 93       	push	r21
 2fe:	6f 93       	push	r22
 300:	7f 93       	push	r23
 302:	8f 93       	push	r24
 304:	9f 93       	push	r25
 306:	af 93       	push	r26
 308:	bf 93       	push	r27
 30a:	ef 93       	push	r30
 30c:	ff 93       	push	r31
 30e:	8d ee       	ldi	r24, 0xED	; 237
 310:	95 e8       	ldi	r25, 0x85	; 133
 312:	9d bd       	out	0x2d, r25	; 45
 314:	8c bd       	out	0x2c, r24	; 44
	//LcdBacklight(1);
	lcdClock();
 316:	b9 df       	rcall	.-142    	; 0x28a <_Z8lcdClockv>
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <_Z9SetSecondv>:
		SetMinute();
	}
	SetSecond();
}

void SetSecond(){
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <_Z9SetSecondv+0x6>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 344:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <tSecond>
 348:	4a e0       	ldi	r20, 0x0A	; 10
 34a:	be 01       	movw	r22, r28
 34c:	6f 5f       	subi	r22, 0xFF	; 255
 34e:	7f 4f       	sbci	r23, 0xFF	; 255
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	68 d4       	rcall	.+2256   	; 0xc24 <__itoa_ncheck>
	char sSecond[2];
	itoa(tSecond,sSecond,10);
	if (tSecond<10)
 354:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <tSecond>
 358:	8a 30       	cpi	r24, 0x0A	; 10
 35a:	20 f4       	brcc	.+8      	; 0x364 <_Z9SetSecondv+0x2a>
	{	sSecond[1]=sSecond[0];
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	8a 83       	std	Y+2, r24	; 0x02
		sSecond[0]='0';
 360:	80 e3       	ldi	r24, 0x30	; 48
 362:	89 83       	std	Y+1, r24	; 0x01
	}
	LcdSetCursor(1,14,sSecond);	
 364:	ae 01       	movw	r20, r28
 366:	4f 5f       	subi	r20, 0xFF	; 255
 368:	5f 4f       	sbci	r21, 0xFF	; 255
 36a:	6e e0       	ldi	r22, 0x0E	; 14
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	14 df       	rcall	.-472    	; 0x198 <_Z12LcdSetCursorhhPc>
}
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <_Z9SetMinutev>:
void SetMinute(){
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	00 d0       	rcall	.+0      	; 0x380 <_Z9SetMinutev+0x6>
 380:	cd b7       	in	r28, 0x3d	; 61
 382:	de b7       	in	r29, 0x3e	; 62
 384:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <tMinute>
 388:	4a e0       	ldi	r20, 0x0A	; 10
 38a:	be 01       	movw	r22, r28
 38c:	6f 5f       	subi	r22, 0xFF	; 255
 38e:	7f 4f       	sbci	r23, 0xFF	; 255
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	48 d4       	rcall	.+2192   	; 0xc24 <__itoa_ncheck>
	char sMinute[2];
	itoa(tMinute,sMinute,10);
	if (tMinute<10)
 394:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <tMinute>
 398:	8a 30       	cpi	r24, 0x0A	; 10
 39a:	20 f4       	brcc	.+8      	; 0x3a4 <_Z9SetMinutev+0x2a>
	{	sMinute[1]=sMinute[0];
 39c:	89 81       	ldd	r24, Y+1	; 0x01
 39e:	8a 83       	std	Y+2, r24	; 0x02
		sMinute[0]='0';
 3a0:	80 e3       	ldi	r24, 0x30	; 48
 3a2:	89 83       	std	Y+1, r24	; 0x01
	}
	LcdSetCursor(1,11,sMinute);
 3a4:	ae 01       	movw	r20, r28
 3a6:	4f 5f       	subi	r20, 0xFF	; 255
 3a8:	5f 4f       	sbci	r21, 0xFF	; 255
 3aa:	6b e0       	ldi	r22, 0x0B	; 11
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	f4 de       	rcall	.-536    	; 0x198 <_Z12LcdSetCursorhhPc>
}
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	08 95       	ret

000003ba <_Z7SetHourv>:
void SetHour(){
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	00 d0       	rcall	.+0      	; 0x3c0 <_Z7SetHourv+0x6>
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <tHour>
 3c8:	4a e0       	ldi	r20, 0x0A	; 10
 3ca:	be 01       	movw	r22, r28
 3cc:	6f 5f       	subi	r22, 0xFF	; 255
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	28 d4       	rcall	.+2128   	; 0xc24 <__itoa_ncheck>
	char sHour[2];
	itoa(tHour,sHour,10);
	if (tHour<10)
 3d4:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <tHour>
 3d8:	8a 30       	cpi	r24, 0x0A	; 10
 3da:	20 f4       	brcc	.+8      	; 0x3e4 <_Z7SetHourv+0x2a>
	{sHour[1]=sHour[0];
 3dc:	89 81       	ldd	r24, Y+1	; 0x01
 3de:	8a 83       	std	Y+2, r24	; 0x02
		sHour[0]='0';
 3e0:	80 e3       	ldi	r24, 0x30	; 48
 3e2:	89 83       	std	Y+1, r24	; 0x01
	}
	LcdSetCursor(1,8,sHour);
 3e4:	ae 01       	movw	r20, r28
 3e6:	4f 5f       	subi	r20, 0xFF	; 255
 3e8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ea:	68 e0       	ldi	r22, 0x08	; 8
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	d4 de       	rcall	.-600    	; 0x198 <_Z12LcdSetCursorhhPc>
}
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	08 95       	ret

000003fa <_Z7SetDatev>:

void SetDate(){
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	00 d0       	rcall	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	1f 92       	push	r1
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	4a e0       	ldi	r20, 0x0A	; 10
 408:	be 01       	movw	r22, r28
 40a:	6f 5f       	subi	r22, 0xFF	; 255
 40c:	7f 4f       	sbci	r23, 0xFF	; 255
 40e:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <tdate>
 412:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <tdate+0x1>
 416:	06 d4       	rcall	.+2060   	; 0xc24 <__itoa_ncheck>
	char sDate[3];
	itoa(tdate,sDate,10);
	
	if (tdate<10)
 418:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <tdate>
 41c:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <tdate+0x1>
 420:	0a 97       	sbiw	r24, 0x0a	; 10
 422:	58 f4       	brcc	.+22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
	{LcdSetCursor(1,3,"00");
 424:	47 e7       	ldi	r20, 0x77	; 119
 426:	50 e0       	ldi	r21, 0x00	; 0
 428:	63 e0       	ldi	r22, 0x03	; 3
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	b5 de       	rcall	.-662    	; 0x198 <_Z12LcdSetCursorhhPc>
	LcdSetCursor(1,5,sDate);
 42e:	ae 01       	movw	r20, r28
 430:	4f 5f       	subi	r20, 0xFF	; 255
 432:	5f 4f       	sbci	r21, 0xFF	; 255
 434:	65 e0       	ldi	r22, 0x05	; 5
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	af de       	rcall	.-674    	; 0x198 <_Z12LcdSetCursorhhPc>
		
	}
	if ((9<tdate)&&(tdate<100))
 43a:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <tdate>
 43e:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <tdate+0x1>
 442:	0a 97       	sbiw	r24, 0x0a	; 10
 444:	8a 35       	cpi	r24, 0x5A	; 90
 446:	91 05       	cpc	r25, r1
 448:	58 f4       	brcc	.+22     	; 0x460 <__stack+0x1>
	{
		LcdSetCursor(1,3,"0");
 44a:	48 e7       	ldi	r20, 0x78	; 120
 44c:	50 e0       	ldi	r21, 0x00	; 0
 44e:	63 e0       	ldi	r22, 0x03	; 3
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	a2 de       	rcall	.-700    	; 0x198 <_Z12LcdSetCursorhhPc>
		LcdSetCursor(1,4,sDate);
 454:	ae 01       	movw	r20, r28
 456:	4f 5f       	subi	r20, 0xFF	; 255
 458:	5f 4f       	sbci	r21, 0xFF	; 255
 45a:	64 e0       	ldi	r22, 0x04	; 4
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	9c de       	rcall	.-712    	; 0x198 <_Z12LcdSetCursorhhPc>
	}
	if ((99<tdate)&&(tdate<1000))
 460:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <tdate>
 464:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <tdate+0x1>
 468:	84 56       	subi	r24, 0x64	; 100
 46a:	91 09       	sbc	r25, r1
 46c:	84 38       	cpi	r24, 0x84	; 132
 46e:	93 40       	sbci	r25, 0x03	; 3
 470:	30 f4       	brcc	.+12     	; 0x47e <__stack+0x1f>
	{LcdSetCursor(1,3,sDate);
 472:	ae 01       	movw	r20, r28
 474:	4f 5f       	subi	r20, 0xFF	; 255
 476:	5f 4f       	sbci	r21, 0xFF	; 255
 478:	63 e0       	ldi	r22, 0x03	; 3
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	8d de       	rcall	.-742    	; 0x198 <_Z12LcdSetCursorhhPc>
	}
	
	
	}
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <_Z11displayInitv>:
	}//Minute
	}//Second
	
}

void displayInit(){            //Initialize  the display clock
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	00 d0       	rcall	.+0      	; 0x490 <_Z11displayInitv+0x6>
 490:	1f 92       	push	r1
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
	LcdSetCursor(0,2,"D");
 496:	41 e6       	ldi	r20, 0x61	; 97
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	62 e0       	ldi	r22, 0x02	; 2
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	7c de       	rcall	.-776    	; 0x198 <_Z12LcdSetCursorhhPc>
	dateCount=eeprom_read_word((uint16_t*)5);
 4a0:	85 e0       	ldi	r24, 0x05	; 5
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	fa d3       	rcall	.+2036   	; 0xc9a <eeprom_read_word>
 4a6:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x1>
 4aa:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
 4ae:	4a e0       	ldi	r20, 0x0A	; 10
 4b0:	be 01       	movw	r22, r28
 4b2:	6f 5f       	subi	r22, 0xFF	; 255
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	b6 d3       	rcall	.+1900   	; 0xc24 <__itoa_ncheck>
	char sDate[3];
	itoa(dateCount,sDate,10);
	
	if (dateCount<10)
 4b8:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 4bc:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 4c0:	0a 97       	sbiw	r24, 0x0a	; 10
 4c2:	58 f4       	brcc	.+22     	; 0x4da <_Z11displayInitv+0x50>
	{LcdSetCursor(0,3,"00");
 4c4:	47 e7       	ldi	r20, 0x77	; 119
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	65 de       	rcall	.-822    	; 0x198 <_Z12LcdSetCursorhhPc>
		LcdSetCursor(0,5,sDate);
 4ce:	ae 01       	movw	r20, r28
 4d0:	4f 5f       	subi	r20, 0xFF	; 255
 4d2:	5f 4f       	sbci	r21, 0xFF	; 255
 4d4:	65 e0       	ldi	r22, 0x05	; 5
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	5f de       	rcall	.-834    	; 0x198 <_Z12LcdSetCursorhhPc>
		
	}
	if ((9<dateCount)&&(dateCount<100))
 4da:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 4de:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 4e2:	0a 97       	sbiw	r24, 0x0a	; 10
 4e4:	8a 35       	cpi	r24, 0x5A	; 90
 4e6:	91 05       	cpc	r25, r1
 4e8:	58 f4       	brcc	.+22     	; 0x500 <_Z11displayInitv+0x76>
	{
		LcdSetCursor(0,3,"0");
 4ea:	48 e7       	ldi	r20, 0x78	; 120
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	63 e0       	ldi	r22, 0x03	; 3
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	52 de       	rcall	.-860    	; 0x198 <_Z12LcdSetCursorhhPc>
		LcdSetCursor(0,4,sDate);
 4f4:	ae 01       	movw	r20, r28
 4f6:	4f 5f       	subi	r20, 0xFF	; 255
 4f8:	5f 4f       	sbci	r21, 0xFF	; 255
 4fa:	64 e0       	ldi	r22, 0x04	; 4
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	4c de       	rcall	.-872    	; 0x198 <_Z12LcdSetCursorhhPc>
	}
	if ((99<dateCount)&&(dateCount<1000))
 500:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 504:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 508:	84 56       	subi	r24, 0x64	; 100
 50a:	91 09       	sbc	r25, r1
 50c:	84 38       	cpi	r24, 0x84	; 132
 50e:	93 40       	sbci	r25, 0x03	; 3
 510:	30 f4       	brcc	.+12     	; 0x51e <_Z11displayInitv+0x94>
	{LcdSetCursor(0,3,sDate);
 512:	ae 01       	movw	r20, r28
 514:	4f 5f       	subi	r20, 0xFF	; 255
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	63 e0       	ldi	r22, 0x03	; 3
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	3d de       	rcall	.-902    	; 0x198 <_Z12LcdSetCursorhhPc>
	}
	
	LcdSetCursor(0,7,"H00:00:00");
 51e:	43 e6       	ldi	r20, 0x63	; 99
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	67 e0       	ldi	r22, 0x07	; 7
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	38 de       	rcall	.-912    	; 0x198 <_Z12LcdSetCursorhhPc>
	
	
	
	LcdSetCursor(1,2,"D");
 528:	41 e6       	ldi	r20, 0x61	; 97
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	62 e0       	ldi	r22, 0x02	; 2
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	33 de       	rcall	.-922    	; 0x198 <_Z12LcdSetCursorhhPc>
	tdate=eeprom_read_word((uint16_t*)3);
 532:	83 e0       	ldi	r24, 0x03	; 3
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	b1 d3       	rcall	.+1890   	; 0xc9a <eeprom_read_word>
 538:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <tdate+0x1>
 53c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <tdate>
	SetDate();
 540:	5c df       	rcall	.-328    	; 0x3fa <_Z7SetDatev>
	
	
	LcdSetCursor(1,7,"H");
 542:	4d e6       	ldi	r20, 0x6D	; 109
 544:	50 e0       	ldi	r21, 0x00	; 0
 546:	67 e0       	ldi	r22, 0x07	; 7
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	26 de       	rcall	.-948    	; 0x198 <_Z12LcdSetCursorhhPc>
	tHour=eeprom_read_byte((uint8_t*)2);
 54c:	82 e0       	ldi	r24, 0x02	; 2
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	9c d3       	rcall	.+1848   	; 0xc8a <eeprom_read_byte>
 552:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <tHour>
	SetHour();
 556:	31 df       	rcall	.-414    	; 0x3ba <_Z7SetHourv>
		
	LcdSetCursor(1,10,":");
 558:	4f e6       	ldi	r20, 0x6F	; 111
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	6a e0       	ldi	r22, 0x0A	; 10
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	1b de       	rcall	.-970    	; 0x198 <_Z12LcdSetCursorhhPc>
	tMinute=eeprom_read_byte((uint8_t*)1);
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	91 d3       	rcall	.+1826   	; 0xc8a <eeprom_read_byte>
 568:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <tMinute>
	SetMinute();
 56c:	06 df       	rcall	.-500    	; 0x37a <_Z9SetMinutev>
	
	tSecond=eeprom_read_byte((uint8_t*)0);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	8b d3       	rcall	.+1814   	; 0xc8a <eeprom_read_byte>
 574:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <tSecond>
	LcdSetCursor(1,13,":");
 578:	4f e6       	ldi	r20, 0x6F	; 111
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	6d e0       	ldi	r22, 0x0D	; 13
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0b de       	rcall	.-1002   	; 0x198 <_Z12LcdSetCursorhhPc>
	SetSecond();
 582:	db de       	rcall	.-586    	; 0x33a <_Z9SetSecondv>
}
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <_Z12displayClockv>:
void displayClock(){      //Connected with Main loop
	
	if (tSecond==0)
 590:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <tSecond>
 594:	81 11       	cpse	r24, r1
 596:	07 c0       	rjmp	.+14     	; 0x5a6 <_Z12displayClockv+0x16>
	{
		if (tMinute==0);
		{
			if (tHour==0)
 598:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <tHour>
 59c:	81 11       	cpse	r24, r1
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <_Z12displayClockv+0x12>
			{ SetDate();
 5a0:	2c df       	rcall	.-424    	; 0x3fa <_Z7SetDatev>
			}
			SetHour();
 5a2:	0b df       	rcall	.-490    	; 0x3ba <_Z7SetHourv>
		}
		SetMinute();
 5a4:	ea de       	rcall	.-556    	; 0x37a <_Z9SetMinutev>
	}
	SetSecond();
 5a6:	c9 de       	rcall	.-622    	; 0x33a <_Z9SetSecondv>
 5a8:	08 95       	ret

000005aa <_Z9enterDatev>:
	}
	
	
	}

void enterDate(){
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	1f 92       	push	r1
 5b4:	cd b7       	in	r28, 0x3d	; 61
 5b6:	de b7       	in	r29, 0x3e	; 62
	uint16_t datetemp;
	ADCSRA&=~(1<<ADIE);
 5b8:	33 98       	cbi	0x06, 3	; 6
	LcdCommand(LCD_RETURNHOME);
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	ad dd       	rcall	.-1190   	; 0x118 <_Z10LcdCommandh>
	LcdCommand(LCD_CLEARDISPLAY);
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	ab dd       	rcall	.-1194   	; 0x118 <_Z10LcdCommandh>
	LcdSetCursor(0,1,"Date");
 5c2:	41 e7       	ldi	r20, 0x71	; 113
 5c4:	50 e0       	ldi	r21, 0x00	; 0
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	e6 dd       	rcall	.-1076   	; 0x198 <_Z12LcdSetCursorhhPc>
	do 
 5cc:	99 99       	sbic	0x13, 1	; 19
 5ce:	fe cf       	rjmp	.-4      	; 0x5cc <_Z9enterDatev+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d0:	2f ef       	ldi	r18, 0xFF	; 255
 5d2:	80 e7       	ldi	r24, 0x70	; 112
 5d4:	92 e0       	ldi	r25, 0x02	; 2
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	80 40       	sbci	r24, 0x00	; 0
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <_Z9enterDatev+0x2c>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <_Z9enterDatev+0x36>
 5e0:	00 00       	nop
	{
	} while ((PINC&0b10)>>1);  //wait release
	_delay_ms(100);
	LcdSetCursor(0,8,"000");
 5e2:	46 e7       	ldi	r20, 0x76	; 118
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	68 e0       	ldi	r22, 0x08	; 8
 5e8:	80 e0       	ldi	r24, 0x00	; 0
 5ea:	d6 dd       	rcall	.-1108   	; 0x198 <_Z12LcdSetCursorhhPc>
	LcdSetCursor(1,10,"");
 5ec:	45 e9       	ldi	r20, 0x95	; 149
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	6a e0       	ldi	r22, 0x0A	; 10
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	d1 dd       	rcall	.-1118   	; 0x198 <_Z12LcdSetCursorhhPc>
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
 5f6:	8d e0       	ldi	r24, 0x0D	; 13
 5f8:	8f dd       	rcall	.-1250   	; 0x118 <_Z10LcdCommandh>
	
	do{
		char adcRead0 [1];
		datetemp=ReadADC(0)/102.4;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	ee dd       	rcall	.-1060   	; 0x1da <_Z7ReadADCh>
 5fe:	bc 01       	movw	r22, r24
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	81 d2       	rcall	.+1282   	; 0xb08 <__floatunsisf>
 606:	2d ec       	ldi	r18, 0xCD	; 205
 608:	3c ec       	ldi	r19, 0xCC	; 204
 60a:	4c ec       	ldi	r20, 0xCC	; 204
 60c:	52 e4       	ldi	r21, 0x42	; 66
 60e:	e8 d1       	rcall	.+976    	; 0x9e0 <__divsf3>
 610:	4f d2       	rcall	.+1182   	; 0xab0 <__fixunssfsi>
 612:	dc 01       	movw	r26, r24
 614:	cb 01       	movw	r24, r22
 616:	8c 01       	movw	r16, r24
 618:	4a e0       	ldi	r20, 0x0A	; 10
 61a:	be 01       	movw	r22, r28
 61c:	6f 5f       	subi	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	01 d3       	rcall	.+1538   	; 0xc24 <__itoa_ncheck>
		LcdSetCursor(0,8,itoa(datetemp,adcRead0,10));
 622:	ac 01       	movw	r20, r24
 624:	68 e0       	ldi	r22, 0x08	; 8
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	b7 dd       	rcall	.-1170   	; 0x198 <_Z12LcdSetCursorhhPc>
		LcdSetCursor(1,8,"");
 62a:	45 e9       	ldi	r20, 0x95	; 149
 62c:	50 e0       	ldi	r21, 0x00	; 0
 62e:	68 e0       	ldi	r22, 0x08	; 8
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	b2 dd       	rcall	.-1180   	; 0x198 <_Z12LcdSetCursorhhPc>
 634:	2f ef       	ldi	r18, 0xFF	; 255
 636:	80 e7       	ldi	r24, 0x70	; 112
 638:	92 e0       	ldi	r25, 0x02	; 2
 63a:	21 50       	subi	r18, 0x01	; 1
 63c:	80 40       	sbci	r24, 0x00	; 0
 63e:	90 40       	sbci	r25, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <_Z9enterDatev+0x90>
 642:	00 c0       	rjmp	.+0      	; 0x644 <_Z9enterDatev+0x9a>
 644:	00 00       	nop
	_delay_ms(100);
	LcdSetCursor(0,8,"000");
	LcdSetCursor(1,10,"");
	LcdCommand(LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_BLINKON);
	
	do{
 646:	99 9b       	sbis	0x13, 1	; 19
 648:	d8 cf       	rjmp	.-80     	; 0x5fa <_Z9enterDatev+0x50>
		datetemp=ReadADC(0)/102.4;
		LcdSetCursor(0,8,itoa(datetemp,adcRead0,10));
		LcdSetCursor(1,8,"");
		_delay_ms(100);
	}while(((PINC&0b10)>>1)==0);
	dateCount=datetemp*100;
 64a:	24 e6       	ldi	r18, 0x64	; 100
 64c:	20 9f       	mul	r18, r16
 64e:	c0 01       	movw	r24, r0
 650:	21 9f       	mul	r18, r17
 652:	90 0d       	add	r25, r0
 654:	11 24       	eor	r1, r1
 656:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__data_end+0x1>
 65a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
	do
 65e:	99 99       	sbic	0x13, 1	; 19
 660:	fe cf       	rjmp	.-4      	; 0x65e <_Z9enterDatev+0xb4>
 662:	2f e7       	ldi	r18, 0x7F	; 127
 664:	8a e1       	ldi	r24, 0x1A	; 26
 666:	96 e0       	ldi	r25, 0x06	; 6
 668:	21 50       	subi	r18, 0x01	; 1
 66a:	80 40       	sbci	r24, 0x00	; 0
 66c:	90 40       	sbci	r25, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <_Z9enterDatev+0xbe>
 670:	00 c0       	rjmp	.+0      	; 0x672 <_Z9enterDatev+0xc8>
 672:	00 00       	nop
	} while ((PINC&0b10)>>1);  //wait release
	_delay_ms(250);
	
	do{
		char adcRead0 [1];
		datetemp=ReadADC(0)/102.4;
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	b1 dd       	rcall	.-1182   	; 0x1da <_Z7ReadADCh>
 678:	bc 01       	movw	r22, r24
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	44 d2       	rcall	.+1160   	; 0xb08 <__floatunsisf>
 680:	2d ec       	ldi	r18, 0xCD	; 205
 682:	3c ec       	ldi	r19, 0xCC	; 204
 684:	4c ec       	ldi	r20, 0xCC	; 204
 686:	52 e4       	ldi	r21, 0x42	; 66
 688:	ab d1       	rcall	.+854    	; 0x9e0 <__divsf3>
 68a:	12 d2       	rcall	.+1060   	; 0xab0 <__fixunssfsi>
 68c:	dc 01       	movw	r26, r24
 68e:	cb 01       	movw	r24, r22
 690:	8c 01       	movw	r16, r24
 692:	4a e0       	ldi	r20, 0x0A	; 10
 694:	be 01       	movw	r22, r28
 696:	6f 5f       	subi	r22, 0xFF	; 255
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	c4 d2       	rcall	.+1416   	; 0xc24 <__itoa_ncheck>
		LcdSetCursor(0,9,itoa(datetemp,adcRead0,10));
 69c:	ac 01       	movw	r20, r24
 69e:	69 e0       	ldi	r22, 0x09	; 9
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	7a dd       	rcall	.-1292   	; 0x198 <_Z12LcdSetCursorhhPc>
		LcdSetCursor(1,9,"");
 6a4:	45 e9       	ldi	r20, 0x95	; 149
 6a6:	50 e0       	ldi	r21, 0x00	; 0
 6a8:	69 e0       	ldi	r22, 0x09	; 9
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	75 dd       	rcall	.-1302   	; 0x198 <_Z12LcdSetCursorhhPc>
 6ae:	2f ef       	ldi	r18, 0xFF	; 255
 6b0:	80 e7       	ldi	r24, 0x70	; 112
 6b2:	92 e0       	ldi	r25, 0x02	; 2
 6b4:	21 50       	subi	r18, 0x01	; 1
 6b6:	80 40       	sbci	r24, 0x00	; 0
 6b8:	90 40       	sbci	r25, 0x00	; 0
 6ba:	e1 f7       	brne	.-8      	; 0x6b4 <_Z9enterDatev+0x10a>
 6bc:	00 c0       	rjmp	.+0      	; 0x6be <_Z9enterDatev+0x114>
 6be:	00 00       	nop
	do
	{
	} while ((PINC&0b10)>>1);  //wait release
	_delay_ms(250);
	
	do{
 6c0:	99 9b       	sbis	0x13, 1	; 19
 6c2:	d8 cf       	rjmp	.-80     	; 0x674 <_Z9enterDatev+0xca>
		datetemp=ReadADC(0)/102.4;
		LcdSetCursor(0,9,itoa(datetemp,adcRead0,10));
		LcdSetCursor(1,9,"");
		_delay_ms(100);
	}while(((PINC&0b10)>>1)==0);
	dateCount+=datetemp*10;
 6c4:	c8 01       	movw	r24, r16
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	00 0f       	add	r16, r16
 6cc:	11 1f       	adc	r17, r17
 6ce:	00 0f       	add	r16, r16
 6d0:	11 1f       	adc	r17, r17
 6d2:	00 0f       	add	r16, r16
 6d4:	11 1f       	adc	r17, r17
 6d6:	08 0f       	add	r16, r24
 6d8:	19 1f       	adc	r17, r25
 6da:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 6de:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 6e2:	08 0f       	add	r16, r24
 6e4:	19 1f       	adc	r17, r25
 6e6:	10 93 97 00 	sts	0x0097, r17	; 0x800097 <__data_end+0x1>
 6ea:	00 93 96 00 	sts	0x0096, r16	; 0x800096 <__data_end>
	do
 6ee:	99 99       	sbic	0x13, 1	; 19
 6f0:	fe cf       	rjmp	.-4      	; 0x6ee <_Z9enterDatev+0x144>
 6f2:	2f e7       	ldi	r18, 0x7F	; 127
 6f4:	8a e1       	ldi	r24, 0x1A	; 26
 6f6:	96 e0       	ldi	r25, 0x06	; 6
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	80 40       	sbci	r24, 0x00	; 0
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <_Z9enterDatev+0x14e>
 700:	00 c0       	rjmp	.+0      	; 0x702 <_Z9enterDatev+0x158>
 702:	00 00       	nop
	{
	} while ((PINC&0b10)>>1);  //wait release
	_delay_ms(250);
	do{
		char adcRead0 [1];
		datetemp=ReadADC(0)/102.4;
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	69 dd       	rcall	.-1326   	; 0x1da <_Z7ReadADCh>
 708:	bc 01       	movw	r22, r24
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	fc d1       	rcall	.+1016   	; 0xb08 <__floatunsisf>
 710:	2d ec       	ldi	r18, 0xCD	; 205
 712:	3c ec       	ldi	r19, 0xCC	; 204
 714:	4c ec       	ldi	r20, 0xCC	; 204
 716:	52 e4       	ldi	r21, 0x42	; 66
 718:	63 d1       	rcall	.+710    	; 0x9e0 <__divsf3>
 71a:	ca d1       	rcall	.+916    	; 0xab0 <__fixunssfsi>
 71c:	dc 01       	movw	r26, r24
 71e:	cb 01       	movw	r24, r22
 720:	8c 01       	movw	r16, r24
 722:	4a e0       	ldi	r20, 0x0A	; 10
 724:	be 01       	movw	r22, r28
 726:	6f 5f       	subi	r22, 0xFF	; 255
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	7c d2       	rcall	.+1272   	; 0xc24 <__itoa_ncheck>
		LcdSetCursor(0,10,itoa(datetemp,adcRead0,10));
 72c:	ac 01       	movw	r20, r24
 72e:	6a e0       	ldi	r22, 0x0A	; 10
 730:	80 e0       	ldi	r24, 0x00	; 0
 732:	32 dd       	rcall	.-1436   	; 0x198 <_Z12LcdSetCursorhhPc>
		LcdSetCursor(1,10,"");
 734:	45 e9       	ldi	r20, 0x95	; 149
 736:	50 e0       	ldi	r21, 0x00	; 0
 738:	6a e0       	ldi	r22, 0x0A	; 10
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	2d dd       	rcall	.-1446   	; 0x198 <_Z12LcdSetCursorhhPc>
 73e:	2f ef       	ldi	r18, 0xFF	; 255
 740:	80 e7       	ldi	r24, 0x70	; 112
 742:	92 e0       	ldi	r25, 0x02	; 2
 744:	21 50       	subi	r18, 0x01	; 1
 746:	80 40       	sbci	r24, 0x00	; 0
 748:	90 40       	sbci	r25, 0x00	; 0
 74a:	e1 f7       	brne	.-8      	; 0x744 <_Z9enterDatev+0x19a>
 74c:	00 c0       	rjmp	.+0      	; 0x74e <_Z9enterDatev+0x1a4>
 74e:	00 00       	nop
	dateCount+=datetemp*10;
	do
	{
	} while ((PINC&0b10)>>1);  //wait release
	_delay_ms(250);
	do{
 750:	99 9b       	sbis	0x13, 1	; 19
 752:	d8 cf       	rjmp	.-80     	; 0x704 <_Z9enterDatev+0x15a>
		datetemp=ReadADC(0)/102.4;
		LcdSetCursor(0,10,itoa(datetemp,adcRead0,10));
		LcdSetCursor(1,10,"");
		_delay_ms(100);
	}while(((PINC&0b10)>>1)==0);
	dateCount+=datetemp;
 754:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 758:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 75c:	08 0f       	add	r16, r24
 75e:	19 1f       	adc	r17, r25
 760:	10 93 97 00 	sts	0x0097, r17	; 0x800097 <__data_end+0x1>
 764:	00 93 96 00 	sts	0x0096, r16	; 0x800096 <__data_end>
	do
 768:	99 99       	sbic	0x13, 1	; 19
 76a:	fe cf       	rjmp	.-4      	; 0x768 <_Z9enterDatev+0x1be>
 76c:	2f e7       	ldi	r18, 0x7F	; 127
 76e:	8a e1       	ldi	r24, 0x1A	; 26
 770:	96 e0       	ldi	r25, 0x06	; 6
 772:	21 50       	subi	r18, 0x01	; 1
 774:	80 40       	sbci	r24, 0x00	; 0
 776:	90 40       	sbci	r25, 0x00	; 0
 778:	e1 f7       	brne	.-8      	; 0x772 <_Z9enterDatev+0x1c8>
 77a:	00 c0       	rjmp	.+0      	; 0x77c <_Z9enterDatev+0x1d2>
 77c:	00 00       	nop
	{
	} while ((PINC&0b10)>>1);  //wait release
	_delay_ms(250);
	eeprom_write_byte((uint8_t*)0,0);
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	8f d2       	rcall	.+1310   	; 0xca4 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)1,0);
 786:	60 e0       	ldi	r22, 0x00	; 0
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	90 e0       	ldi	r25, 0x00	; 0
 78c:	8b d2       	rcall	.+1302   	; 0xca4 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)2,0);
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	87 d2       	rcall	.+1294   	; 0xca4 <eeprom_write_byte>
	eeprom_write_word((uint16_t*)3,0);
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	83 e0       	ldi	r24, 0x03	; 3
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	8f d2       	rcall	.+1310   	; 0xcbe <eeprom_write_word>
	eeprom_write_word((uint16_t*)5,dateCount);	
 7a0:	60 91 96 00 	lds	r22, 0x0096	; 0x800096 <__data_end>
 7a4:	70 91 97 00 	lds	r23, 0x0097	; 0x800097 <__data_end+0x1>
 7a8:	85 e0       	ldi	r24, 0x05	; 5
 7aa:	90 e0       	ldi	r25, 0x00	; 0
 7ac:	88 d2       	rcall	.+1296   	; 0xcbe <eeprom_write_word>
	LcdCommand(LCD_DISPLAYCONTROL|(LCD_DISPLAYON&~LCD_BLINKON));
 7ae:	8c e0       	ldi	r24, 0x0C	; 12
 7b0:	b3 dc       	rcall	.-1690   	; 0x118 <_Z10LcdCommandh>
	adcIntruptRefresh();
 7b2:	61 dd       	rcall	.-1342   	; 0x276 <_Z17adcIntruptRefreshv>
}
 7b4:	0f 90       	pop	r0
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	1f 91       	pop	r17
 7bc:	0f 91       	pop	r16
 7be:	08 95       	ret

000007c0 <_Z11checkButtonv>:
bool checkButton(){
 7c0:	cf 93       	push	r28
	eeprom_write_byte((uint8_t*)0,tSecond);
 7c2:	60 91 9c 00 	lds	r22, 0x009C	; 0x80009c <tSecond>
 7c6:	80 e0       	ldi	r24, 0x00	; 0
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	6c d2       	rcall	.+1240   	; 0xca4 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)1,tMinute);
 7cc:	60 91 9b 00 	lds	r22, 0x009B	; 0x80009b <tMinute>
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	67 d2       	rcall	.+1230   	; 0xca4 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)2,tHour);
 7d6:	60 91 9a 00 	lds	r22, 0x009A	; 0x80009a <tHour>
 7da:	82 e0       	ldi	r24, 0x02	; 2
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	62 d2       	rcall	.+1220   	; 0xca4 <eeprom_write_byte>
	eeprom_write_word((uint16_t*)3,tdate);
 7e0:	60 91 98 00 	lds	r22, 0x0098	; 0x800098 <tdate>
 7e4:	70 91 99 00 	lds	r23, 0x0099	; 0x800099 <tdate+0x1>
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	68 d2       	rcall	.+1232   	; 0xcbe <eeprom_write_word>
 7ee:	8f ec       	ldi	r24, 0xCF	; 207
 7f0:	97 e0       	ldi	r25, 0x07	; 7
 7f2:	01 97       	sbiw	r24, 0x01	; 1
 7f4:	f1 f7       	brne	.-4      	; 0x7f2 <_Z11checkButtonv+0x32>
 7f6:	00 c0       	rjmp	.+0      	; 0x7f8 <_Z11checkButtonv+0x38>
 7f8:	00 00       	nop
 7fa:	88 eb       	ldi	r24, 0xB8	; 184
 7fc:	9b e0       	ldi	r25, 0x0B	; 11
 7fe:	08 c0       	rjmp	.+16     	; 0x810 <_Z11checkButtonv+0x50>
 800:	ef ec       	ldi	r30, 0xCF	; 207
 802:	f7 e0       	ldi	r31, 0x07	; 7
 804:	31 97       	sbiw	r30, 0x01	; 1
 806:	f1 f7       	brne	.-4      	; 0x804 <_Z11checkButtonv+0x44>
 808:	00 c0       	rjmp	.+0      	; 0x80a <_Z11checkButtonv+0x4a>
 80a:	00 00       	nop
 80c:	01 97       	sbiw	r24, 0x01	; 1
	bool state1=0;
	bool state2=0;
	do 
	{_delay_ms(1);
		i++;
		if (i>3000)             // Set to 3000
 80e:	e1 f0       	breq	.+56     	; 0x848 <_Z11checkButtonv+0x88>
	eeprom_write_byte((uint8_t*)2,tHour);
	eeprom_write_word((uint16_t*)3,tdate);
	uint16_t i=0;
	bool state1=0;
	bool state2=0;
	do 
 810:	99 99       	sbic	0x13, 1	; 19
 812:	f6 cf       	rjmp	.-20     	; 0x800 <_Z11checkButtonv+0x40>
	eeprom_write_byte((uint8_t*)1,tMinute);
	eeprom_write_byte((uint8_t*)2,tHour);
	eeprom_write_word((uint16_t*)3,tdate);
	uint16_t i=0;
	bool state1=0;
	bool state2=0;
 814:	c0 e0       	ldi	r28, 0x00	; 0
 816:	31 c0       	rjmp	.+98     	; 0x87a <_Z11checkButtonv+0xba>
 818:	ff e7       	ldi	r31, 0x7F	; 127
 81a:	2a e1       	ldi	r18, 0x1A	; 26
 81c:	86 e0       	ldi	r24, 0x06	; 6
 81e:	f1 50       	subi	r31, 0x01	; 1
 820:	20 40       	sbci	r18, 0x00	; 0
 822:	80 40       	sbci	r24, 0x00	; 0
 824:	e1 f7       	brne	.-8      	; 0x81e <_Z11checkButtonv+0x5e>
 826:	00 c0       	rjmp	.+0      	; 0x828 <_Z11checkButtonv+0x68>
 828:	00 00       	nop
		LcdSetCursor(0,0,"Memory Clearing");
		i=0;
		do
		{_delay_ms(250);                         //Set to 250
			
			LcdSetCursor(1,i,">");
 82a:	4a e7       	ldi	r20, 0x7A	; 122
 82c:	50 e0       	ldi	r21, 0x00	; 0
 82e:	6c 2f       	mov	r22, r28
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	b2 dc       	rcall	.-1692   	; 0x198 <_Z12LcdSetCursorhhPc>
 834:	cf 5f       	subi	r28, 0xFF	; 255
			i++;
			if (i>15)
 836:	c0 31       	cpi	r28, 0x10	; 16
 838:	21 f0       	breq	.+8      	; 0x842 <_Z11checkButtonv+0x82>
	{
		LcdCommand(LCD_RETURNHOME);
		LcdCommand(LCD_CLEARDISPLAY);
		LcdSetCursor(0,0,"Memory Clearing");
		i=0;
		do
 83a:	99 99       	sbic	0x13, 1	; 19
 83c:	ed cf       	rjmp	.-38     	; 0x818 <_Z11checkButtonv+0x58>
	eeprom_write_byte((uint8_t*)1,tMinute);
	eeprom_write_byte((uint8_t*)2,tHour);
	eeprom_write_word((uint16_t*)3,tdate);
	uint16_t i=0;
	bool state1=0;
	bool state2=0;
 83e:	c0 e0       	ldi	r28, 0x00	; 0
 840:	1c c0       	rjmp	.+56     	; 0x87a <_Z11checkButtonv+0xba>
		
	}
	
	
	if (state2==1)
	{enterDate();
 842:	b3 de       	rcall	.-666    	; 0x5aa <_Z9enterDatev>
 844:	c1 e0       	ldi	r28, 0x01	; 1
 846:	19 c0       	rjmp	.+50     	; 0x87a <_Z11checkButtonv+0xba>
	} while ((PINC&0b10)>>1); //End of State 1
	
	
	if (state1==1)
	{
		LcdCommand(LCD_RETURNHOME);
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	66 dc       	rcall	.-1844   	; 0x118 <_Z10LcdCommandh>
		LcdCommand(LCD_CLEARDISPLAY);
 84c:	81 e0       	ldi	r24, 0x01	; 1
 84e:	64 dc       	rcall	.-1848   	; 0x118 <_Z10LcdCommandh>
		LcdSetCursor(0,0,"Memory Clearing");
 850:	4c e7       	ldi	r20, 0x7C	; 124
 852:	50 e0       	ldi	r21, 0x00	; 0
 854:	60 e0       	ldi	r22, 0x00	; 0
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	9f dc       	rcall	.-1730   	; 0x198 <_Z12LcdSetCursorhhPc>
 85a:	9f e7       	ldi	r25, 0x7F	; 127
 85c:	ea e1       	ldi	r30, 0x1A	; 26
 85e:	f6 e0       	ldi	r31, 0x06	; 6
 860:	91 50       	subi	r25, 0x01	; 1
 862:	e0 40       	sbci	r30, 0x00	; 0
 864:	f0 40       	sbci	r31, 0x00	; 0
 866:	e1 f7       	brne	.-8      	; 0x860 <_Z11checkButtonv+0xa0>
 868:	00 c0       	rjmp	.+0      	; 0x86a <_Z11checkButtonv+0xaa>
 86a:	00 00       	nop
		i=0;
		do
		{_delay_ms(250);                         //Set to 250
			
			LcdSetCursor(1,i,">");
 86c:	4a e7       	ldi	r20, 0x7A	; 122
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	60 e0       	ldi	r22, 0x00	; 0
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	91 dc       	rcall	.-1758   	; 0x198 <_Z12LcdSetCursorhhPc>
 876:	c1 e0       	ldi	r28, 0x01	; 1
 878:	e0 cf       	rjmp	.-64     	; 0x83a <_Z11checkButtonv+0x7a>
	
	
	if (state2==1)
	{enterDate();
	}
	LcdCommand(LCD_RETURNHOME);
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	4d dc       	rcall	.-1894   	; 0x118 <_Z10LcdCommandh>
	LcdCommand(LCD_CLEARDISPLAY);
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	4b dc       	rcall	.-1898   	; 0x118 <_Z10LcdCommandh>
	displayInit();
 882:	03 de       	rcall	.-1018   	; 0x48a <_Z11displayInitv>
	return state2;
}
 884:	8c 2f       	mov	r24, r28
 886:	cf 91       	pop	r28
 888:	08 95       	ret

0000088a <_Z4fullv>:
void full(){
 88a:	cf 93       	push	r28
	TIMSK&=~(1<<TOIE1);
 88c:	89 b7       	in	r24, 0x39	; 57
 88e:	8b 7f       	andi	r24, 0xFB	; 251
 890:	89 bf       	out	0x39, r24	; 57
	
}

void LcdBacklight(bool Backlightdata){
	if (Backlightdata==1)
	{Backlight=0b00001000;
 892:	c8 e0       	ldi	r28, 0x08	; 8
	while(1){
		LcdSetCursor(0,0,"");
 894:	45 e9       	ldi	r20, 0x95	; 149
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	60 e0       	ldi	r22, 0x00	; 0
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	7d dc       	rcall	.-1798   	; 0x198 <_Z12LcdSetCursorhhPc>
	} 
	else
	{Backlight=0b00000000;
 89e:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <Backlight>
 8a2:	2f ef       	ldi	r18, 0xFF	; 255
 8a4:	89 e6       	ldi	r24, 0x69	; 105
 8a6:	98 e1       	ldi	r25, 0x18	; 24
 8a8:	21 50       	subi	r18, 0x01	; 1
 8aa:	80 40       	sbci	r24, 0x00	; 0
 8ac:	90 40       	sbci	r25, 0x00	; 0
 8ae:	e1 f7       	brne	.-8      	; 0x8a8 <_Z4fullv+0x1e>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <_Z4fullv+0x28>
 8b2:	00 00       	nop
		LcdBacklight(0);
		_delay_ms(1000);
		LcdSetCursor(0,0,"");
 8b4:	45 e9       	ldi	r20, 0x95	; 149
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	6d dc       	rcall	.-1830   	; 0x198 <_Z12LcdSetCursorhhPc>
	
}

void LcdBacklight(bool Backlightdata){
	if (Backlightdata==1)
	{Backlight=0b00001000;
 8be:	c0 93 9d 00 	sts	0x009D, r28	; 0x80009d <Backlight>
 8c2:	2f ef       	ldi	r18, 0xFF	; 255
 8c4:	89 e6       	ldi	r24, 0x69	; 105
 8c6:	98 e1       	ldi	r25, 0x18	; 24
 8c8:	21 50       	subi	r18, 0x01	; 1
 8ca:	80 40       	sbci	r24, 0x00	; 0
 8cc:	90 40       	sbci	r25, 0x00	; 0
 8ce:	e1 f7       	brne	.-8      	; 0x8c8 <_Z4fullv+0x3e>
 8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <_Z4fullv+0x48>
 8d2:	00 00       	nop
		LcdBacklight(1);
		_delay_ms(1000);
		if ((PINC&0b10)>>1){
 8d4:	99 9b       	sbis	0x13, 1	; 19
 8d6:	de cf       	rjmp	.-68     	; 0x894 <_Z4fullv+0xa>
			
			if (checkButton())
 8d8:	73 df       	rcall	.-282    	; 0x7c0 <_Z11checkButtonv>
 8da:	88 23       	and	r24, r24
 8dc:	d9 f2       	breq	.-74     	; 0x894 <_Z4fullv+0xa>
			{break;
			}
	}
}
}
 8de:	cf 91       	pop	r28
 8e0:	08 95       	ret

000008e2 <main>:

int main(void)
{	/*Install functions*/
	InitADC();
 8e2:	75 dc       	rcall	.-1814   	; 0x1ce <_Z7InitADCv>
	while(ReadADC(3)<700){}
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	79 dc       	rcall	.-1806   	; 0x1da <_Z7ReadADCh>
 8e8:	8c 3b       	cpi	r24, 0xBC	; 188
 8ea:	92 40       	sbci	r25, 0x02	; 2
 8ec:	d8 f3       	brcs	.-10     	; 0x8e4 <main+0x2>
	adcIntruptRefresh();
 8ee:	c3 dc       	rcall	.-1658   	; 0x276 <_Z17adcIntruptRefreshv>
	//USART_Init(9600);
	LcdInit(0x27);
 8f0:	87 e2       	ldi	r24, 0x27	; 39
 8f2:	1e dc       	rcall	.-1988   	; 0x130 <_Z7LcdInith>
	
	
	//USART_TxStringln("Started");
	LcdSetCursor(0,4,"TECHART");
 8f4:	4c e8       	ldi	r20, 0x8C	; 140
 8f6:	50 e0       	ldi	r21, 0x00	; 0
 8f8:	64 e0       	ldi	r22, 0x04	; 4
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	4d dc       	rcall	.-1894   	; 0x198 <_Z12LcdSetCursorhhPc>
 8fe:	8f ef       	ldi	r24, 0xFF	; 255
 900:	99 e6       	ldi	r25, 0x69	; 105
 902:	e8 e1       	ldi	r30, 0x18	; 24
 904:	81 50       	subi	r24, 0x01	; 1
 906:	90 40       	sbci	r25, 0x00	; 0
 908:	e0 40       	sbci	r30, 0x00	; 0
 90a:	e1 f7       	brne	.-8      	; 0x904 <main+0x22>
 90c:	00 c0       	rjmp	.+0      	; 0x90e <main+0x2c>
 90e:	00 00       	nop
	_delay_ms(1000);
	LcdCommand(LCD_RETURNHOME);
 910:	82 e0       	ldi	r24, 0x02	; 2
 912:	02 dc       	rcall	.-2044   	; 0x118 <_Z10LcdCommandh>
	LcdCommand(LCD_CLEARDISPLAY);
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	00 dc       	rcall	.-2048   	; 0x118 <_Z10LcdCommandh>
		
	displayInit();
 918:	b8 dd       	rcall	.-1168   	; 0x48a <_Z11displayInitv>
 91a:	ff ef       	ldi	r31, 0xFF	; 255
 91c:	20 e7       	ldi	r18, 0x70	; 112
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	f1 50       	subi	r31, 0x01	; 1
 922:	20 40       	sbci	r18, 0x00	; 0
 924:	80 40       	sbci	r24, 0x00	; 0
 926:	e1 f7       	brne	.-8      	; 0x920 <main+0x3e>
 928:	00 c0       	rjmp	.+0      	; 0x92a <main+0x48>
 92a:	00 00       	nop
	_delay_ms(100);
	/*One second Pulse*/
	TIMSK|=(1<<TOIE1);  /*Interrupt Enable*/
 92c:	89 b7       	in	r24, 0x39	; 57
 92e:	84 60       	ori	r24, 0x04	; 4
 930:	89 bf       	out	0x39, r24	; 57
	TCCR1B |= (1<<CS12);//(1<<CS12); /*Set prescaler 256 and start*/
 932:	8e b5       	in	r24, 0x2e	; 46
 934:	84 60       	ori	r24, 0x04	; 4
 936:	8e bd       	out	0x2e, r24	; 46
	TCNT1=34285;
 938:	8d ee       	ldi	r24, 0xED	; 237
 93a:	95 e8       	ldi	r25, 0x85	; 133
 93c:	9d bd       	out	0x2d, r25	; 45
 93e:	8c bd       	out	0x2c, r24	; 44
	
	DDRC&=~(1<<1);
 940:	a1 98       	cbi	0x14, 1	; 20
	DDRB&=~(1<<PB1);
 942:	b9 98       	cbi	0x17, 1	; 23
	for( j=0;j<16;j++){
	if ((PINB&0b10)>>1){
	k|=1<<j	;
	}
	else{
	k&=~(1<<j);	
 944:	c1 e0       	ldi	r28, 0x01	; 1
 946:	d0 e0       	ldi	r29, 0x00	; 0
	DDRC&=~(1<<1);
	DDRB&=~(1<<PB1);
	//////////////////////////////////////////////////////////////////
	while (1)
	{	
	displayClock();	
 948:	23 de       	rcall	.-954    	; 0x590 <_Z12displayClockv>
	if ((PINC&0b10)>>1){checkButton();}    //Push Button check
 94a:	99 9b       	sbis	0x13, 1	; 19
 94c:	44 c0       	rjmp	.+136    	; 0x9d6 <main+0xf4>
 94e:	38 df       	rcall	.-400    	; 0x7c0 <_Z11checkButtonv>
 950:	42 c0       	rjmp	.+132    	; 0x9d6 <main+0xf4>
	
	/*Check AC Voltage .............	*/
	uint8_t j;
	uint16_t k=0;
	for( j=0;j<16;j++){
	if ((PINB&0b10)>>1){
 952:	b1 9b       	sbis	0x16, 1	; 22
 954:	0a c0       	rjmp	.+20     	; 0x96a <main+0x88>
	k|=1<<j	;
 956:	ae 01       	movw	r20, r28
 958:	08 2e       	mov	r0, r24
 95a:	02 c0       	rjmp	.+4      	; 0x960 <main+0x7e>
 95c:	44 0f       	add	r20, r20
 95e:	55 1f       	adc	r21, r21
 960:	0a 94       	dec	r0
 962:	e2 f7       	brpl	.-8      	; 0x95c <main+0x7a>
 964:	24 2b       	or	r18, r20
 966:	35 2b       	or	r19, r21
 968:	0b c0       	rjmp	.+22     	; 0x980 <main+0x9e>
	}
	else{
	k&=~(1<<j);	
 96a:	ae 01       	movw	r20, r28
 96c:	08 2e       	mov	r0, r24
 96e:	02 c0       	rjmp	.+4      	; 0x974 <main+0x92>
 970:	44 0f       	add	r20, r20
 972:	55 1f       	adc	r21, r21
 974:	0a 94       	dec	r0
 976:	e2 f7       	brpl	.-8      	; 0x970 <main+0x8e>
 978:	40 95       	com	r20
 97a:	50 95       	com	r21
 97c:	24 23       	and	r18, r20
 97e:	35 23       	and	r19, r21
 980:	ef e3       	ldi	r30, 0x3F	; 63
 982:	fc e9       	ldi	r31, 0x9C	; 156
 984:	31 97       	sbiw	r30, 0x01	; 1
 986:	f1 f7       	brne	.-4      	; 0x984 <main+0xa2>
 988:	00 c0       	rjmp	.+0      	; 0x98a <main+0xa8>
 98a:	00 00       	nop
 98c:	01 96       	adiw	r24, 0x01	; 1
	if ((PINC&0b10)>>1){checkButton();}    //Push Button check
	
	/*Check AC Voltage .............	*/
	uint8_t j;
	uint16_t k=0;
	for( j=0;j<16;j++){
 98e:	80 31       	cpi	r24, 0x10	; 16
 990:	91 05       	cpc	r25, r1
 992:	f9 f6       	brne	.-66     	; 0x952 <main+0x70>
	else{
	k&=~(1<<j);	
	}
	_delay_ms(20);
	}
	if (k!=0)
 994:	23 2b       	or	r18, r19
 996:	49 f0       	breq	.+18     	; 0x9aa <main+0xc8>
	{TIMSK|=(1<<TOIE1);
 998:	89 b7       	in	r24, 0x39	; 57
 99a:	84 60       	ori	r24, 0x04	; 4
 99c:	89 bf       	out	0x39, r24	; 57
		LcdSetCursor(1,0,">");
 99e:	4a e7       	ldi	r20, 0x7A	; 122
 9a0:	50 e0       	ldi	r21, 0x00	; 0
 9a2:	60 e0       	ldi	r22, 0x00	; 0
 9a4:	81 e0       	ldi	r24, 0x01	; 1
 9a6:	f8 db       	rcall	.-2064   	; 0x198 <_Z12LcdSetCursorhhPc>
 9a8:	08 c0       	rjmp	.+16     	; 0x9ba <main+0xd8>
	} 
	else
	{TIMSK&=~(1<<TOIE1);
 9aa:	89 b7       	in	r24, 0x39	; 57
 9ac:	8b 7f       	andi	r24, 0xFB	; 251
 9ae:	89 bf       	out	0x39, r24	; 57
		LcdSetCursor(1,0," ");
 9b0:	44 e9       	ldi	r20, 0x94	; 148
 9b2:	50 e0       	ldi	r21, 0x00	; 0
 9b4:	60 e0       	ldi	r22, 0x00	; 0
 9b6:	81 e0       	ldi	r24, 0x01	; 1
 9b8:	ef db       	rcall	.-2082   	; 0x198 <_Z12LcdSetCursorhhPc>
	}
	/*End of Check AC Voltage .............*/
	
	
	/*Timer Overflow Check*/
	if (tdate>=dateCount){
 9ba:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <tdate>
 9be:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <tdate+0x1>
 9c2:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
 9c6:	90 91 97 00 	lds	r25, 0x0097	; 0x800097 <__data_end+0x1>
 9ca:	28 17       	cp	r18, r24
 9cc:	39 07       	cpc	r19, r25
 9ce:	08 f4       	brcc	.+2      	; 0x9d2 <main+0xf0>
 9d0:	bb cf       	rjmp	.-138    	; 0x948 <main+0x66>
		full();
 9d2:	5b df       	rcall	.-330    	; 0x88a <_Z4fullv>
 9d4:	b9 cf       	rjmp	.-142    	; 0x948 <main+0x66>
	}
}
}

int main(void)
{	/*Install functions*/
 9d6:	80 e0       	ldi	r24, 0x00	; 0
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	20 e0       	ldi	r18, 0x00	; 0
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	b9 cf       	rjmp	.-142    	; 0x952 <main+0x70>

000009e0 <__divsf3>:
 9e0:	0c d0       	rcall	.+24     	; 0x9fa <__divsf3x>
 9e2:	e6 c0       	rjmp	.+460    	; 0xbb0 <__fp_round>
 9e4:	de d0       	rcall	.+444    	; 0xba2 <__fp_pscB>
 9e6:	40 f0       	brcs	.+16     	; 0x9f8 <__divsf3+0x18>
 9e8:	d5 d0       	rcall	.+426    	; 0xb94 <__fp_pscA>
 9ea:	30 f0       	brcs	.+12     	; 0x9f8 <__divsf3+0x18>
 9ec:	21 f4       	brne	.+8      	; 0x9f6 <__divsf3+0x16>
 9ee:	5f 3f       	cpi	r21, 0xFF	; 255
 9f0:	19 f0       	breq	.+6      	; 0x9f8 <__divsf3+0x18>
 9f2:	c7 c0       	rjmp	.+398    	; 0xb82 <__fp_inf>
 9f4:	51 11       	cpse	r21, r1
 9f6:	10 c1       	rjmp	.+544    	; 0xc18 <__fp_szero>
 9f8:	ca c0       	rjmp	.+404    	; 0xb8e <__fp_nan>

000009fa <__divsf3x>:
 9fa:	eb d0       	rcall	.+470    	; 0xbd2 <__fp_split3>
 9fc:	98 f3       	brcs	.-26     	; 0x9e4 <__divsf3+0x4>

000009fe <__divsf3_pse>:
 9fe:	99 23       	and	r25, r25
 a00:	c9 f3       	breq	.-14     	; 0x9f4 <__divsf3+0x14>
 a02:	55 23       	and	r21, r21
 a04:	b1 f3       	breq	.-20     	; 0x9f2 <__divsf3+0x12>
 a06:	95 1b       	sub	r25, r21
 a08:	55 0b       	sbc	r21, r21
 a0a:	bb 27       	eor	r27, r27
 a0c:	aa 27       	eor	r26, r26
 a0e:	62 17       	cp	r22, r18
 a10:	73 07       	cpc	r23, r19
 a12:	84 07       	cpc	r24, r20
 a14:	38 f0       	brcs	.+14     	; 0xa24 <__divsf3_pse+0x26>
 a16:	9f 5f       	subi	r25, 0xFF	; 255
 a18:	5f 4f       	sbci	r21, 0xFF	; 255
 a1a:	22 0f       	add	r18, r18
 a1c:	33 1f       	adc	r19, r19
 a1e:	44 1f       	adc	r20, r20
 a20:	aa 1f       	adc	r26, r26
 a22:	a9 f3       	breq	.-22     	; 0xa0e <__divsf3_pse+0x10>
 a24:	33 d0       	rcall	.+102    	; 0xa8c <__divsf3_pse+0x8e>
 a26:	0e 2e       	mov	r0, r30
 a28:	3a f0       	brmi	.+14     	; 0xa38 <__divsf3_pse+0x3a>
 a2a:	e0 e8       	ldi	r30, 0x80	; 128
 a2c:	30 d0       	rcall	.+96     	; 0xa8e <__divsf3_pse+0x90>
 a2e:	91 50       	subi	r25, 0x01	; 1
 a30:	50 40       	sbci	r21, 0x00	; 0
 a32:	e6 95       	lsr	r30
 a34:	00 1c       	adc	r0, r0
 a36:	ca f7       	brpl	.-14     	; 0xa2a <__divsf3_pse+0x2c>
 a38:	29 d0       	rcall	.+82     	; 0xa8c <__divsf3_pse+0x8e>
 a3a:	fe 2f       	mov	r31, r30
 a3c:	27 d0       	rcall	.+78     	; 0xa8c <__divsf3_pse+0x8e>
 a3e:	66 0f       	add	r22, r22
 a40:	77 1f       	adc	r23, r23
 a42:	88 1f       	adc	r24, r24
 a44:	bb 1f       	adc	r27, r27
 a46:	26 17       	cp	r18, r22
 a48:	37 07       	cpc	r19, r23
 a4a:	48 07       	cpc	r20, r24
 a4c:	ab 07       	cpc	r26, r27
 a4e:	b0 e8       	ldi	r27, 0x80	; 128
 a50:	09 f0       	breq	.+2      	; 0xa54 <__divsf3_pse+0x56>
 a52:	bb 0b       	sbc	r27, r27
 a54:	80 2d       	mov	r24, r0
 a56:	bf 01       	movw	r22, r30
 a58:	ff 27       	eor	r31, r31
 a5a:	93 58       	subi	r25, 0x83	; 131
 a5c:	5f 4f       	sbci	r21, 0xFF	; 255
 a5e:	2a f0       	brmi	.+10     	; 0xa6a <__divsf3_pse+0x6c>
 a60:	9e 3f       	cpi	r25, 0xFE	; 254
 a62:	51 05       	cpc	r21, r1
 a64:	68 f0       	brcs	.+26     	; 0xa80 <__divsf3_pse+0x82>
 a66:	8d c0       	rjmp	.+282    	; 0xb82 <__fp_inf>
 a68:	d7 c0       	rjmp	.+430    	; 0xc18 <__fp_szero>
 a6a:	5f 3f       	cpi	r21, 0xFF	; 255
 a6c:	ec f3       	brlt	.-6      	; 0xa68 <__divsf3_pse+0x6a>
 a6e:	98 3e       	cpi	r25, 0xE8	; 232
 a70:	dc f3       	brlt	.-10     	; 0xa68 <__divsf3_pse+0x6a>
 a72:	86 95       	lsr	r24
 a74:	77 95       	ror	r23
 a76:	67 95       	ror	r22
 a78:	b7 95       	ror	r27
 a7a:	f7 95       	ror	r31
 a7c:	9f 5f       	subi	r25, 0xFF	; 255
 a7e:	c9 f7       	brne	.-14     	; 0xa72 <__divsf3_pse+0x74>
 a80:	88 0f       	add	r24, r24
 a82:	91 1d       	adc	r25, r1
 a84:	96 95       	lsr	r25
 a86:	87 95       	ror	r24
 a88:	97 f9       	bld	r25, 7
 a8a:	08 95       	ret
 a8c:	e1 e0       	ldi	r30, 0x01	; 1
 a8e:	66 0f       	add	r22, r22
 a90:	77 1f       	adc	r23, r23
 a92:	88 1f       	adc	r24, r24
 a94:	bb 1f       	adc	r27, r27
 a96:	62 17       	cp	r22, r18
 a98:	73 07       	cpc	r23, r19
 a9a:	84 07       	cpc	r24, r20
 a9c:	ba 07       	cpc	r27, r26
 a9e:	20 f0       	brcs	.+8      	; 0xaa8 <__divsf3_pse+0xaa>
 aa0:	62 1b       	sub	r22, r18
 aa2:	73 0b       	sbc	r23, r19
 aa4:	84 0b       	sbc	r24, r20
 aa6:	ba 0b       	sbc	r27, r26
 aa8:	ee 1f       	adc	r30, r30
 aaa:	88 f7       	brcc	.-30     	; 0xa8e <__divsf3_pse+0x90>
 aac:	e0 95       	com	r30
 aae:	08 95       	ret

00000ab0 <__fixunssfsi>:
 ab0:	98 d0       	rcall	.+304    	; 0xbe2 <__fp_splitA>
 ab2:	88 f0       	brcs	.+34     	; 0xad6 <__fixunssfsi+0x26>
 ab4:	9f 57       	subi	r25, 0x7F	; 127
 ab6:	90 f0       	brcs	.+36     	; 0xadc <__fixunssfsi+0x2c>
 ab8:	b9 2f       	mov	r27, r25
 aba:	99 27       	eor	r25, r25
 abc:	b7 51       	subi	r27, 0x17	; 23
 abe:	a0 f0       	brcs	.+40     	; 0xae8 <__fixunssfsi+0x38>
 ac0:	d1 f0       	breq	.+52     	; 0xaf6 <__fixunssfsi+0x46>
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	99 1f       	adc	r25, r25
 aca:	1a f0       	brmi	.+6      	; 0xad2 <__fixunssfsi+0x22>
 acc:	ba 95       	dec	r27
 ace:	c9 f7       	brne	.-14     	; 0xac2 <__fixunssfsi+0x12>
 ad0:	12 c0       	rjmp	.+36     	; 0xaf6 <__fixunssfsi+0x46>
 ad2:	b1 30       	cpi	r27, 0x01	; 1
 ad4:	81 f0       	breq	.+32     	; 0xaf6 <__fixunssfsi+0x46>
 ad6:	9f d0       	rcall	.+318    	; 0xc16 <__fp_zero>
 ad8:	b1 e0       	ldi	r27, 0x01	; 1
 ada:	08 95       	ret
 adc:	9c c0       	rjmp	.+312    	; 0xc16 <__fp_zero>
 ade:	67 2f       	mov	r22, r23
 ae0:	78 2f       	mov	r23, r24
 ae2:	88 27       	eor	r24, r24
 ae4:	b8 5f       	subi	r27, 0xF8	; 248
 ae6:	39 f0       	breq	.+14     	; 0xaf6 <__fixunssfsi+0x46>
 ae8:	b9 3f       	cpi	r27, 0xF9	; 249
 aea:	cc f3       	brlt	.-14     	; 0xade <__fixunssfsi+0x2e>
 aec:	86 95       	lsr	r24
 aee:	77 95       	ror	r23
 af0:	67 95       	ror	r22
 af2:	b3 95       	inc	r27
 af4:	d9 f7       	brne	.-10     	; 0xaec <__fixunssfsi+0x3c>
 af6:	3e f4       	brtc	.+14     	; 0xb06 <__fixunssfsi+0x56>
 af8:	90 95       	com	r25
 afa:	80 95       	com	r24
 afc:	70 95       	com	r23
 afe:	61 95       	neg	r22
 b00:	7f 4f       	sbci	r23, 0xFF	; 255
 b02:	8f 4f       	sbci	r24, 0xFF	; 255
 b04:	9f 4f       	sbci	r25, 0xFF	; 255
 b06:	08 95       	ret

00000b08 <__floatunsisf>:
 b08:	e8 94       	clt
 b0a:	09 c0       	rjmp	.+18     	; 0xb1e <__floatsisf+0x12>

00000b0c <__floatsisf>:
 b0c:	97 fb       	bst	r25, 7
 b0e:	3e f4       	brtc	.+14     	; 0xb1e <__floatsisf+0x12>
 b10:	90 95       	com	r25
 b12:	80 95       	com	r24
 b14:	70 95       	com	r23
 b16:	61 95       	neg	r22
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	99 23       	and	r25, r25
 b20:	a9 f0       	breq	.+42     	; 0xb4c <__floatsisf+0x40>
 b22:	f9 2f       	mov	r31, r25
 b24:	96 e9       	ldi	r25, 0x96	; 150
 b26:	bb 27       	eor	r27, r27
 b28:	93 95       	inc	r25
 b2a:	f6 95       	lsr	r31
 b2c:	87 95       	ror	r24
 b2e:	77 95       	ror	r23
 b30:	67 95       	ror	r22
 b32:	b7 95       	ror	r27
 b34:	f1 11       	cpse	r31, r1
 b36:	f8 cf       	rjmp	.-16     	; 0xb28 <__floatsisf+0x1c>
 b38:	fa f4       	brpl	.+62     	; 0xb78 <__floatsisf+0x6c>
 b3a:	bb 0f       	add	r27, r27
 b3c:	11 f4       	brne	.+4      	; 0xb42 <__floatsisf+0x36>
 b3e:	60 ff       	sbrs	r22, 0
 b40:	1b c0       	rjmp	.+54     	; 0xb78 <__floatsisf+0x6c>
 b42:	6f 5f       	subi	r22, 0xFF	; 255
 b44:	7f 4f       	sbci	r23, 0xFF	; 255
 b46:	8f 4f       	sbci	r24, 0xFF	; 255
 b48:	9f 4f       	sbci	r25, 0xFF	; 255
 b4a:	16 c0       	rjmp	.+44     	; 0xb78 <__floatsisf+0x6c>
 b4c:	88 23       	and	r24, r24
 b4e:	11 f0       	breq	.+4      	; 0xb54 <__floatsisf+0x48>
 b50:	96 e9       	ldi	r25, 0x96	; 150
 b52:	11 c0       	rjmp	.+34     	; 0xb76 <__floatsisf+0x6a>
 b54:	77 23       	and	r23, r23
 b56:	21 f0       	breq	.+8      	; 0xb60 <__floatsisf+0x54>
 b58:	9e e8       	ldi	r25, 0x8E	; 142
 b5a:	87 2f       	mov	r24, r23
 b5c:	76 2f       	mov	r23, r22
 b5e:	05 c0       	rjmp	.+10     	; 0xb6a <__floatsisf+0x5e>
 b60:	66 23       	and	r22, r22
 b62:	71 f0       	breq	.+28     	; 0xb80 <__floatsisf+0x74>
 b64:	96 e8       	ldi	r25, 0x86	; 134
 b66:	86 2f       	mov	r24, r22
 b68:	70 e0       	ldi	r23, 0x00	; 0
 b6a:	60 e0       	ldi	r22, 0x00	; 0
 b6c:	2a f0       	brmi	.+10     	; 0xb78 <__floatsisf+0x6c>
 b6e:	9a 95       	dec	r25
 b70:	66 0f       	add	r22, r22
 b72:	77 1f       	adc	r23, r23
 b74:	88 1f       	adc	r24, r24
 b76:	da f7       	brpl	.-10     	; 0xb6e <__floatsisf+0x62>
 b78:	88 0f       	add	r24, r24
 b7a:	96 95       	lsr	r25
 b7c:	87 95       	ror	r24
 b7e:	97 f9       	bld	r25, 7
 b80:	08 95       	ret

00000b82 <__fp_inf>:
 b82:	97 f9       	bld	r25, 7
 b84:	9f 67       	ori	r25, 0x7F	; 127
 b86:	80 e8       	ldi	r24, 0x80	; 128
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	60 e0       	ldi	r22, 0x00	; 0
 b8c:	08 95       	ret

00000b8e <__fp_nan>:
 b8e:	9f ef       	ldi	r25, 0xFF	; 255
 b90:	80 ec       	ldi	r24, 0xC0	; 192
 b92:	08 95       	ret

00000b94 <__fp_pscA>:
 b94:	00 24       	eor	r0, r0
 b96:	0a 94       	dec	r0
 b98:	16 16       	cp	r1, r22
 b9a:	17 06       	cpc	r1, r23
 b9c:	18 06       	cpc	r1, r24
 b9e:	09 06       	cpc	r0, r25
 ba0:	08 95       	ret

00000ba2 <__fp_pscB>:
 ba2:	00 24       	eor	r0, r0
 ba4:	0a 94       	dec	r0
 ba6:	12 16       	cp	r1, r18
 ba8:	13 06       	cpc	r1, r19
 baa:	14 06       	cpc	r1, r20
 bac:	05 06       	cpc	r0, r21
 bae:	08 95       	ret

00000bb0 <__fp_round>:
 bb0:	09 2e       	mov	r0, r25
 bb2:	03 94       	inc	r0
 bb4:	00 0c       	add	r0, r0
 bb6:	11 f4       	brne	.+4      	; 0xbbc <__fp_round+0xc>
 bb8:	88 23       	and	r24, r24
 bba:	52 f0       	brmi	.+20     	; 0xbd0 <__fp_round+0x20>
 bbc:	bb 0f       	add	r27, r27
 bbe:	40 f4       	brcc	.+16     	; 0xbd0 <__fp_round+0x20>
 bc0:	bf 2b       	or	r27, r31
 bc2:	11 f4       	brne	.+4      	; 0xbc8 <__fp_round+0x18>
 bc4:	60 ff       	sbrs	r22, 0
 bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <__fp_round+0x20>
 bc8:	6f 5f       	subi	r22, 0xFF	; 255
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	8f 4f       	sbci	r24, 0xFF	; 255
 bce:	9f 4f       	sbci	r25, 0xFF	; 255
 bd0:	08 95       	ret

00000bd2 <__fp_split3>:
 bd2:	57 fd       	sbrc	r21, 7
 bd4:	90 58       	subi	r25, 0x80	; 128
 bd6:	44 0f       	add	r20, r20
 bd8:	55 1f       	adc	r21, r21
 bda:	59 f0       	breq	.+22     	; 0xbf2 <__fp_splitA+0x10>
 bdc:	5f 3f       	cpi	r21, 0xFF	; 255
 bde:	71 f0       	breq	.+28     	; 0xbfc <__fp_splitA+0x1a>
 be0:	47 95       	ror	r20

00000be2 <__fp_splitA>:
 be2:	88 0f       	add	r24, r24
 be4:	97 fb       	bst	r25, 7
 be6:	99 1f       	adc	r25, r25
 be8:	61 f0       	breq	.+24     	; 0xc02 <__fp_splitA+0x20>
 bea:	9f 3f       	cpi	r25, 0xFF	; 255
 bec:	79 f0       	breq	.+30     	; 0xc0c <__fp_splitA+0x2a>
 bee:	87 95       	ror	r24
 bf0:	08 95       	ret
 bf2:	12 16       	cp	r1, r18
 bf4:	13 06       	cpc	r1, r19
 bf6:	14 06       	cpc	r1, r20
 bf8:	55 1f       	adc	r21, r21
 bfa:	f2 cf       	rjmp	.-28     	; 0xbe0 <__fp_split3+0xe>
 bfc:	46 95       	lsr	r20
 bfe:	f1 df       	rcall	.-30     	; 0xbe2 <__fp_splitA>
 c00:	08 c0       	rjmp	.+16     	; 0xc12 <__fp_splitA+0x30>
 c02:	16 16       	cp	r1, r22
 c04:	17 06       	cpc	r1, r23
 c06:	18 06       	cpc	r1, r24
 c08:	99 1f       	adc	r25, r25
 c0a:	f1 cf       	rjmp	.-30     	; 0xbee <__fp_splitA+0xc>
 c0c:	86 95       	lsr	r24
 c0e:	71 05       	cpc	r23, r1
 c10:	61 05       	cpc	r22, r1
 c12:	08 94       	sec
 c14:	08 95       	ret

00000c16 <__fp_zero>:
 c16:	e8 94       	clt

00000c18 <__fp_szero>:
 c18:	bb 27       	eor	r27, r27
 c1a:	66 27       	eor	r22, r22
 c1c:	77 27       	eor	r23, r23
 c1e:	cb 01       	movw	r24, r22
 c20:	97 f9       	bld	r25, 7
 c22:	08 95       	ret

00000c24 <__itoa_ncheck>:
 c24:	bb 27       	eor	r27, r27
 c26:	4a 30       	cpi	r20, 0x0A	; 10
 c28:	31 f4       	brne	.+12     	; 0xc36 <__itoa_ncheck+0x12>
 c2a:	99 23       	and	r25, r25
 c2c:	22 f4       	brpl	.+8      	; 0xc36 <__itoa_ncheck+0x12>
 c2e:	bd e2       	ldi	r27, 0x2D	; 45
 c30:	90 95       	com	r25
 c32:	81 95       	neg	r24
 c34:	9f 4f       	sbci	r25, 0xFF	; 255
 c36:	01 c0       	rjmp	.+2      	; 0xc3a <__utoa_common>

00000c38 <__utoa_ncheck>:
 c38:	bb 27       	eor	r27, r27

00000c3a <__utoa_common>:
 c3a:	fb 01       	movw	r30, r22
 c3c:	55 27       	eor	r21, r21
 c3e:	aa 27       	eor	r26, r26
 c40:	88 0f       	add	r24, r24
 c42:	99 1f       	adc	r25, r25
 c44:	aa 1f       	adc	r26, r26
 c46:	a4 17       	cp	r26, r20
 c48:	10 f0       	brcs	.+4      	; 0xc4e <__utoa_common+0x14>
 c4a:	a4 1b       	sub	r26, r20
 c4c:	83 95       	inc	r24
 c4e:	50 51       	subi	r21, 0x10	; 16
 c50:	b9 f7       	brne	.-18     	; 0xc40 <__utoa_common+0x6>
 c52:	a0 5d       	subi	r26, 0xD0	; 208
 c54:	aa 33       	cpi	r26, 0x3A	; 58
 c56:	08 f0       	brcs	.+2      	; 0xc5a <__utoa_common+0x20>
 c58:	a9 5d       	subi	r26, 0xD9	; 217
 c5a:	a1 93       	st	Z+, r26
 c5c:	00 97       	sbiw	r24, 0x00	; 0
 c5e:	79 f7       	brne	.-34     	; 0xc3e <__utoa_common+0x4>
 c60:	b1 11       	cpse	r27, r1
 c62:	b1 93       	st	Z+, r27
 c64:	11 92       	st	Z+, r1
 c66:	cb 01       	movw	r24, r22
 c68:	00 c0       	rjmp	.+0      	; 0xc6a <strrev>

00000c6a <strrev>:
 c6a:	dc 01       	movw	r26, r24
 c6c:	fc 01       	movw	r30, r24
 c6e:	67 2f       	mov	r22, r23
 c70:	71 91       	ld	r23, Z+
 c72:	77 23       	and	r23, r23
 c74:	e1 f7       	brne	.-8      	; 0xc6e <strrev+0x4>
 c76:	32 97       	sbiw	r30, 0x02	; 2
 c78:	04 c0       	rjmp	.+8      	; 0xc82 <strrev+0x18>
 c7a:	7c 91       	ld	r23, X
 c7c:	6d 93       	st	X+, r22
 c7e:	70 83       	st	Z, r23
 c80:	62 91       	ld	r22, -Z
 c82:	ae 17       	cp	r26, r30
 c84:	bf 07       	cpc	r27, r31
 c86:	c8 f3       	brcs	.-14     	; 0xc7a <strrev+0x10>
 c88:	08 95       	ret

00000c8a <eeprom_read_byte>:
 c8a:	e1 99       	sbic	0x1c, 1	; 28
 c8c:	fe cf       	rjmp	.-4      	; 0xc8a <eeprom_read_byte>
 c8e:	9f bb       	out	0x1f, r25	; 31
 c90:	8e bb       	out	0x1e, r24	; 30
 c92:	e0 9a       	sbi	0x1c, 0	; 28
 c94:	99 27       	eor	r25, r25
 c96:	8d b3       	in	r24, 0x1d	; 29
 c98:	08 95       	ret

00000c9a <eeprom_read_word>:
 c9a:	a8 e1       	ldi	r26, 0x18	; 24
 c9c:	b0 e0       	ldi	r27, 0x00	; 0
 c9e:	42 e0       	ldi	r20, 0x02	; 2
 ca0:	50 e0       	ldi	r21, 0x00	; 0
 ca2:	12 c0       	rjmp	.+36     	; 0xcc8 <eeprom_read_blraw>

00000ca4 <eeprom_write_byte>:
 ca4:	26 2f       	mov	r18, r22

00000ca6 <eeprom_write_r18>:
 ca6:	e1 99       	sbic	0x1c, 1	; 28
 ca8:	fe cf       	rjmp	.-4      	; 0xca6 <eeprom_write_r18>
 caa:	9f bb       	out	0x1f, r25	; 31
 cac:	8e bb       	out	0x1e, r24	; 30
 cae:	2d bb       	out	0x1d, r18	; 29
 cb0:	0f b6       	in	r0, 0x3f	; 63
 cb2:	f8 94       	cli
 cb4:	e2 9a       	sbi	0x1c, 2	; 28
 cb6:	e1 9a       	sbi	0x1c, 1	; 28
 cb8:	0f be       	out	0x3f, r0	; 63
 cba:	01 96       	adiw	r24, 0x01	; 1
 cbc:	08 95       	ret

00000cbe <eeprom_write_word>:
 cbe:	f2 df       	rcall	.-28     	; 0xca4 <eeprom_write_byte>
 cc0:	27 2f       	mov	r18, r23
 cc2:	f1 cf       	rjmp	.-30     	; 0xca6 <eeprom_write_r18>

00000cc4 <eeprom_read_block>:
 cc4:	dc 01       	movw	r26, r24
 cc6:	cb 01       	movw	r24, r22

00000cc8 <eeprom_read_blraw>:
 cc8:	fc 01       	movw	r30, r24
 cca:	e1 99       	sbic	0x1c, 1	; 28
 ccc:	fe cf       	rjmp	.-4      	; 0xcca <eeprom_read_blraw+0x2>
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <eeprom_read_blraw+0x14>
 cd0:	ff bb       	out	0x1f, r31	; 31
 cd2:	ee bb       	out	0x1e, r30	; 30
 cd4:	e0 9a       	sbi	0x1c, 0	; 28
 cd6:	31 96       	adiw	r30, 0x01	; 1
 cd8:	0d b2       	in	r0, 0x1d	; 29
 cda:	0d 92       	st	X+, r0
 cdc:	41 50       	subi	r20, 0x01	; 1
 cde:	50 40       	sbci	r21, 0x00	; 0
 ce0:	b8 f7       	brcc	.-18     	; 0xcd0 <eeprom_read_blraw+0x8>
 ce2:	08 95       	ret

00000ce4 <_exit>:
 ce4:	f8 94       	cli

00000ce6 <__stop_program>:
 ce6:	ff cf       	rjmp	.-2      	; 0xce6 <__stop_program>
